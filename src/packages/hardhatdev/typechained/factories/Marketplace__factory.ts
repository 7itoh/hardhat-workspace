/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Signer,
  utils,
  BigNumberish,
  Contract,
  ContractFactory,
  Overrides,
} from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Marketplace, MarketplaceInterface } from "../Marketplace";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_minimum",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "approvers",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "approversCount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "contribute",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "_description",
        type: "string",
      },
      {
        internalType: "uint256",
        name: "_value",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "_recipient",
        type: "address",
      },
    ],
    name: "createRequest",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "getManager",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "minimumContribution",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "requests",
    outputs: [
      {
        internalType: "string",
        name: "description",
        type: "string",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        internalType: "bool",
        name: "complete",
        type: "bool",
      },
      {
        internalType: "uint256",
        name: "approvalsCount",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50604051610b6d380380610b6d83398181016040528101906100329190610095565b33600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600381905550506100df565b60008151905061008f816100c8565b92915050565b6000602082840312156100a757600080fd5b60006100b584828501610080565b91505092915050565b6000819050919050565b6100d1816100be565b81146100dc57600080fd5b50565b610a7f806100ee6000396000f3fe6080604052600436106100705760003560e01c80638a9cfd551161004e5780638a9cfd551461011e578063937e09b114610147578063d500958414610172578063d7bb99ba1461019d57610070565b80630a1443911461007557806381d12c58146100b257806382fde093146100f3575b600080fd5b34801561008157600080fd5b5061009c6004803603810190610097919061060b565b6101a7565b6040516100a99190610745565b60405180910390f35b3480156100be57600080fd5b506100d960048036038101906100d4919061069b565b6101c7565b6040516100ea959493929190610760565b60405180910390f35b3480156100ff57600080fd5b506101086102b2565b60405161011591906107ba565b60405180910390f35b34801561012a57600080fd5b5061014560048036038101906101409190610634565b6102b8565b005b34801561015357600080fd5b5061015c610426565b60405161016991906107ba565b60405180910390f35b34801561017e57600080fd5b5061018761042c565b604051610194919061072a565b60405180910390f35b6101a5610456565b005b60046020528060005260406000206000915054906101000a900460ff1681565b60016020528060005260406000206000915090508060000180546101ea906108d1565b80601f0160208091040260200160405190810160405280929190818152602001828054610216906108d1565b80156102635780601f1061023857610100808354040283529160200191610263565b820191906000526020600020905b81548152906001019060200180831161024657829003601f168201915b5050505050908060010154908060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060020160149054906101000a900460ff16908060030154905085565b60055481565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461031257600080fd5b600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1661036857600080fd5b60006001600080600081548092919061038090610934565b9190505581526020019081526020016000209050838160000190805190602001906103ac9291906104d6565b50828160010181905550818160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060008160020160146101000a81548160ff0219169083151502179055506000816003018190555050505050565b60035481565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600354341161046457600080fd5b6001600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550600560008154809291906104cf90610934565b9190505550565b8280546104e2906108d1565b90600052602060002090601f016020900481019282610504576000855561054b565b82601f1061051d57805160ff191683800117855561054b565b8280016001018555821561054b579182015b8281111561054a57825182559160200191906001019061052f565b5b509050610558919061055c565b5090565b5b8082111561057557600081600090555060010161055d565b5090565b600061058c610587846107fa565b6107d5565b9050828152602081018484840111156105a457600080fd5b6105af84828561088f565b509392505050565b6000813590506105c681610a1b565b92915050565b600082601f8301126105dd57600080fd5b81356105ed848260208601610579565b91505092915050565b60008135905061060581610a32565b92915050565b60006020828403121561061d57600080fd5b600061062b848285016105b7565b91505092915050565b60008060006060848603121561064957600080fd5b600084013567ffffffffffffffff81111561066357600080fd5b61066f868287016105cc565b9350506020610680868287016105f6565b9250506040610691868287016105b7565b9150509250925092565b6000602082840312156106ad57600080fd5b60006106bb848285016105f6565b91505092915050565b6106cd81610847565b82525050565b6106dc81610859565b82525050565b60006106ed8261082b565b6106f78185610836565b935061070781856020860161089e565b61071081610a0a565b840191505092915050565b61072481610885565b82525050565b600060208201905061073f60008301846106c4565b92915050565b600060208201905061075a60008301846106d3565b92915050565b600060a082019050818103600083015261077a81886106e2565b9050610789602083018761071b565b61079660408301866106c4565b6107a360608301856106d3565b6107b0608083018461071b565b9695505050505050565b60006020820190506107cf600083018461071b565b92915050565b60006107df6107f0565b90506107eb8282610903565b919050565b6000604051905090565b600067ffffffffffffffff821115610815576108146109db565b5b61081e82610a0a565b9050602081019050919050565b600081519050919050565b600082825260208201905092915050565b600061085282610865565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b838110156108bc5780820151818401526020810190506108a1565b838111156108cb576000848401525b50505050565b600060028204905060018216806108e957607f821691505b602082108114156108fd576108fc6109ac565b5b50919050565b61090c82610a0a565b810181811067ffffffffffffffff8211171561092b5761092a6109db565b5b80604052505050565b600061093f82610885565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156109725761097161097d565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b610a2481610847565b8114610a2f57600080fd5b50565b610a3b81610885565b8114610a4657600080fd5b5056fea264697066735822122042f10f4505df4e74ab44d39a07fd6155ad4630769a824c3ff27fd04f3a6afba064736f6c63430008040033";

export class Marketplace__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    _minimum: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Marketplace> {
    return super.deploy(_minimum, overrides || {}) as Promise<Marketplace>;
  }
  getDeployTransaction(
    _minimum: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_minimum, overrides || {});
  }
  attach(address: string): Marketplace {
    return super.attach(address) as Marketplace;
  }
  connect(signer: Signer): Marketplace__factory {
    return super.connect(signer) as Marketplace__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MarketplaceInterface {
    return new utils.Interface(_abi) as MarketplaceInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Marketplace {
    return new Contract(address, _abi, signerOrProvider) as Marketplace;
  }
}
