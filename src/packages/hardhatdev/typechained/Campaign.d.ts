/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface CampaignInterface extends ethers.utils.Interface {
  functions: {
    "approverRequest(uint256)": FunctionFragment;
    "approvers(address)": FunctionFragment;
    "approversCount()": FunctionFragment;
    "contribute()": FunctionFragment;
    "createRequest(string,uint256,address)": FunctionFragment;
    "finalizeRequest(uint256)": FunctionFragment;
    "getMinimumContribution()": FunctionFragment;
    "getRequestsCount()": FunctionFragment;
    "getSummary()": FunctionFragment;
    "manager()": FunctionFragment;
    "requests(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "approverRequest",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "approvers", values: [string]): string;
  encodeFunctionData(
    functionFragment: "approversCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "contribute",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createRequest",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "finalizeRequest",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMinimumContribution",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRequestsCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSummary",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "manager", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "requests",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "approverRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "approvers", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "approversCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "contribute", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "finalizeRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMinimumContribution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRequestsCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getSummary", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "manager", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "requests", data: BytesLike): Result;

  events: {};
}

export class Campaign extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: CampaignInterface;

  functions: {
    approverRequest(
      index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    approvers(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    approversCount(overrides?: CallOverrides): Promise<[number]>;

    contribute(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createRequest(
      description: string,
      value: BigNumberish,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    finalizeRequest(
      index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getMinimumContribution(overrides?: CallOverrides): Promise<[BigNumber]>;

    getRequestsCount(overrides?: CallOverrides): Promise<[number]>;

    getSummary(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, number, number, string]>;

    manager(overrides?: CallOverrides): Promise<[string]>;

    requests(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, string, boolean, number] & {
        description: string;
        value: BigNumber;
        recipient: string;
        complete: boolean;
        approvalCount: number;
      }
    >;
  };

  approverRequest(
    index: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  approvers(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  approversCount(overrides?: CallOverrides): Promise<number>;

  contribute(
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createRequest(
    description: string,
    value: BigNumberish,
    recipient: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  finalizeRequest(
    index: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getMinimumContribution(overrides?: CallOverrides): Promise<BigNumber>;

  getRequestsCount(overrides?: CallOverrides): Promise<number>;

  getSummary(
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber, number, number, string]>;

  manager(overrides?: CallOverrides): Promise<string>;

  requests(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, string, boolean, number] & {
      description: string;
      value: BigNumber;
      recipient: string;
      complete: boolean;
      approvalCount: number;
    }
  >;

  callStatic: {
    approverRequest(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    approvers(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    approversCount(overrides?: CallOverrides): Promise<number>;

    contribute(overrides?: CallOverrides): Promise<void>;

    createRequest(
      description: string,
      value: BigNumberish,
      recipient: string,
      overrides?: CallOverrides
    ): Promise<void>;

    finalizeRequest(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getMinimumContribution(overrides?: CallOverrides): Promise<BigNumber>;

    getRequestsCount(overrides?: CallOverrides): Promise<number>;

    getSummary(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, number, number, string]>;

    manager(overrides?: CallOverrides): Promise<string>;

    requests(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, string, boolean, number] & {
        description: string;
        value: BigNumber;
        recipient: string;
        complete: boolean;
        approvalCount: number;
      }
    >;
  };

  filters: {};

  estimateGas: {
    approverRequest(
      index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    approvers(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    approversCount(overrides?: CallOverrides): Promise<BigNumber>;

    contribute(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createRequest(
      description: string,
      value: BigNumberish,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    finalizeRequest(
      index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getMinimumContribution(overrides?: CallOverrides): Promise<BigNumber>;

    getRequestsCount(overrides?: CallOverrides): Promise<BigNumber>;

    getSummary(overrides?: CallOverrides): Promise<BigNumber>;

    manager(overrides?: CallOverrides): Promise<BigNumber>;

    requests(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    approverRequest(
      index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    approvers(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approversCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    contribute(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createRequest(
      description: string,
      value: BigNumberish,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    finalizeRequest(
      index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getMinimumContribution(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRequestsCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getSummary(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    manager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    requests(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
